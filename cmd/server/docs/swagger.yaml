definitions:
  github_com_qhmd_gitforgits_internal_domain_auth.Auth:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      role:
        type: string
      updatedAt:
        type: string
    type: object
  github_com_qhmd_gitforgits_internal_domain_book.Book:
    properties:
      author:
        example: John Smith
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      page:
        example: 205
        type: integer
      title:
        example: How To Become Backend Engineer
        type: string
      updatedAt:
        type: string
    type: object
  github_com_qhmd_gitforgits_internal_dto_auth.ErrorResponseAuth:
    properties:
      error:
        example: something went wrong
        type: string
      success:
        example: false
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_auth.ErrorResponseLogin:
    properties:
      error:
        example: email already used
        type: string
      message:
        example: try another email
        type: string
      success:
        example: false
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_auth.ErrorUnauthorized:
    properties:
      message:
        example: missing refresh token
        type: string
      success:
        example: false
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  github_com_qhmd_gitforgits_internal_dto_auth.RegisterRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 50
        minLength: 4
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  github_com_qhmd_gitforgits_internal_dto_auth.SuccessAccessToken:
    properties:
      data:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1hZGRla2U0N...
        type: string
      message:
        example: success to access token
        type: string
      success:
        example: true
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_auth.SuccessLogin:
    properties:
      data:
        $ref: '#/definitions/github_com_qhmd_gitforgits_internal_domain_auth.Auth'
      message:
        example: success to login
        type: string
      success:
        example: true
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_auth.SuccessLogout:
    properties:
      message:
        example: success to log out
        type: string
      success:
        example: true
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_auth.SuccessRegis:
    properties:
      data:
        $ref: '#/definitions/github_com_qhmd_gitforgits_internal_domain_auth.Auth'
      message:
        example: successfull created
        type: string
      success:
        example: true
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_auth.SuccessUpdate:
    properties:
      data:
        $ref: '#/definitions/github_com_qhmd_gitforgits_internal_domain_auth.Auth'
      message:
        example: updated successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_book.BookNotFoundResponse:
    properties:
      errors:
        example: book with id {id} does not exist
        type: string
      message:
        example: book not found
        type: string
      success:
        example: false
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_book.BookRequest:
    properties:
      author:
        example: John Smith
        maxLength: 50
        minLength: 4
        type: string
      page:
        example: 205
        type: integer
      title:
        example: How To Become Backend Engineer
        type: string
    required:
    - author
    - page
    - title
    type: object
  github_com_qhmd_gitforgits_internal_dto_book.DeleteSuccesfully:
    properties:
      message:
        example: delete successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_book.ErrorResponse:
    properties:
      error:
        example: something went wrong
        type: string
      success:
        example: false
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_book.InvalidId:
    properties:
      error:
        example: Invalid id
        type: string
      message:
        example: Your id is invalid
        type: string
      success:
        example: false
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_book.MissingAuthorization:
    properties:
      error:
        example: missing authorization header
        type: string
      success:
        example: false
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_book.SuccessGetBook:
    properties:
      data:
        $ref: '#/definitions/github_com_qhmd_gitforgits_internal_domain_book.Book'
      message:
        example: successfully get the book
        type: string
      success:
        example: true
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_book.SuccessGetListBook:
    properties:
      data:
        $ref: '#/definitions/github_com_qhmd_gitforgits_internal_domain_book.Book'
      message:
        example: successfully get list book
        type: string
      success:
        example: true
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_book.SuccessfullCreate:
    properties:
      data:
        $ref: '#/definitions/github_com_qhmd_gitforgits_internal_domain_book.Book'
      message:
        example: successfully add the book
        type: string
      success:
        example: true
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_book.SuccessfullUpdate:
    properties:
      data:
        $ref: '#/definitions/github_com_qhmd_gitforgits_internal_domain_book.Book'
      message:
        example: update successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  github_com_qhmd_gitforgits_internal_dto_book.TitleAlreadytaken:
    properties:
      error:
        example: book with this title already exists
        type: string
      message:
        example: Title already exist, choose another titile
        type: string
      success:
        example: false
        type: boolean
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  users.EmailAlreadyUsed:
    properties:
      error:
        example: this is email already used
        type: string
      message:
        example: Email already exist, choose another Email
        type: string
      success:
        example: false
        type: boolean
    type: object
  users.ErrorResponse:
    properties:
      error:
        example: something went wrong
        type: string
      success:
        example: false
        type: boolean
    type: object
  users.InvalidId:
    properties:
      error:
        example: Invalid id
        type: string
      message:
        example: Your id is invalid
        type: string
      success:
        example: false
        type: boolean
    type: object
  users.SuccessDeleteUser:
    properties:
      message:
        example: success delete user
        type: string
      success:
        example: true
        type: boolean
    type: object
  users.SuccessGetList:
    properties:
      data:
        items:
          $ref: '#/definitions/github_com_qhmd_gitforgits_internal_domain_auth.Auth'
        type: array
      message:
        example: successfully get list user
        type: string
      success:
        example: true
        type: boolean
    type: object
  users.SuccessGetUser:
    properties:
      data:
        $ref: '#/definitions/github_com_qhmd_gitforgits_internal_domain_auth.Auth'
      message:
        example: successfully get the user
        type: string
      success:
        example: true
        type: boolean
    type: object
  users.UpdateRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 50
        minLength: 4
        type: string
      password:
        type: string
      role:
        enum:
        - user
        - admin
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
  users.UserNotFoundResponse:
    properties:
      errors:
        example: user with id {id} does not exist
        type: string
      message:
        example: user not found
        type: string
      success:
        example: false
        type: boolean
    type: object
info:
  contact: {}
  description: |-
    API documentation for project GitForGits
    Login as admin:
    email: admingitforgits12@gmail.com
    password: @GitForGitsAdmin21
  termsOfService: http://swagger.io/terms/
  title: GitForGits API
  version: "1.0"
paths:
  /admin/users/:
    get:
      consumes:
      - application/json
      description: Get list user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.SuccessGetList'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.UserNotFoundResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get List User
      tags:
      - Users
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.SuccessDeleteUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.InvalidId'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.UserNotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieve a single user by its ID
      parameters:
      - description: Users ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.SuccessGetUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.InvalidId'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.UserNotFoundResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Account
        in: body
        name: Auth
        required: true
        schema:
          $ref: '#/definitions/users.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.SuccessGetList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.InvalidId'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.UserNotFoundResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/users.EmailAlreadyUsed'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - Users
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login Account
      parameters:
      - description: Login Account
        in: body
        name: Auth
        required: true
        schema:
          $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.SuccessLogin'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.ErrorResponseLogin'
      summary: Login Account
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout from account users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.SuccessLogout'
      summary: Logout Account
      tags:
      - Auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Account User to see their data
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.SuccessLogin'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.ErrorResponseAuth'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Me Account
      tags:
      - Auth
  /auth/me/update:
    put:
      consumes:
      - application/json
      description: Update user account
      parameters:
      - description: Update Account
        in: body
        name: Auth
        required: true
        schema:
          $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.SuccessUpdate'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.ErrorUnauthorized'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.ErrorResponseLogin'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.ErrorResponseAuth'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Update Account
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: get access token in the token expired
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.SuccessAccessToken'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.ErrorUnauthorized'
      summary: get access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create Account with Register
      parameters:
      - description: Create Account
        in: body
        name: Auth
        required: true
        schema:
          $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.SuccessRegis'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_auth.ErrorResponseAuth'
      summary: Create Account
      tags:
      - Auth
  /books:
    get:
      consumes:
      - application/json
      description: Retrieve all books from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.SuccessGetListBook'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.ErrorResponse'
      summary: Get all books
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Add a new book to the database
      parameters:
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.BookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.SuccessfullCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.MissingAuthorization'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.TitleAlreadytaken'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Create a new book
      tags:
      - Books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a book from the database using its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.DeleteSuccesfully'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.InvalidId'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.BookNotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete book by ID
      tags:
      - Books
    get:
      consumes:
      - application/json
      description: Retrieve a single book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.SuccessGetBook'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.ErrorResponse'
      summary: Get book by ID
      tags:
      - Books
    put:
      consumes:
      - application/json
      description: Update book information by its ID, u have to login first to access
        your access token
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.BookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.SuccessfullUpdate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.InvalidId'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.BookNotFoundResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_qhmd_gitforgits_internal_dto_book.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Update book by ID
      tags:
      - Books
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"